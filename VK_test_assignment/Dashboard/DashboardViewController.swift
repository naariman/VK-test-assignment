//
//  DashboardViewController.swift
//  VK Test Assignment
//
//  Created Nariman on 22.03.2024.
//  Copyright © 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Dastan Makhutov @mchutov
//

import UIKit

private struct Constants {
    static let minimumZoomScale: CGFloat = 0.5
    static let maximumZoomScale: CGFloat = 5.0
}

final class DashboardViewController: UIViewController {
	var presenter: DashboardPresenterProtocol?
    
    private let emptyTopView: VKView = .init()
    private let statisticsView: DashboardStatisticsView = .init()
    private let playView: PlayView = .init()
    
    private let scrollableContainerView: UIView = {
        let view = UIView()
        return view
    }()

    private lazy var zoomButtonsView: ZoomButtonsView = .init()
    
    private let scrollView: UIScrollView = {
       let scrollView = UIScrollView()
        return scrollView
    }()
    
    lazy private var collectionView: UICollectionView = {
        let layout: UICollectionViewFlowLayout = .init()
        layout.scrollDirection = .vertical
        let collectionView = UICollectionView(
            frame: .zero,
            collectionViewLayout: layout
        )
        collectionView.backgroundColor = .clear
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(GeneralCell.self)
        return collectionView
    }()
    
	override func viewDidLoad() {
        super.viewDidLoad()
        presenter?.viewDidLoad()
        setupUI()
    }
    
    func configureStatisticsView(with model: EpidemicOverallStatistic) {
        statisticsView.configure(with: model)
    }
}

private extension DashboardViewController {
    func setupUI() {
        let scrollView = UIScrollView(frame: view.bounds)
        scrollView.delegate = self
        scrollView.minimumZoomScale = Constants.minimumZoomScale
        scrollView.maximumZoomScale = Constants.maximumZoomScale
        view.addSubview(scrollView)
        view.backgroundColor = .dashboardBackground
        view.addSubviews(
            emptyTopView,
            statisticsView,
            playView,
            zoomButtonsView
        )
        scrollView.addSubview(scrollableContainerView)
        scrollableContainerView.addSubview(collectionView)
        scrollableContainerView.frame = scrollView.bounds
        collectionView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }

        zoomButtonsView.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.trailing.equalToSuperview().offset(-16)
        }
        
        emptyTopView.snp.makeConstraints { make in
            make.top.equalToSuperview()
            make.leading.trailing.equalToSuperview()
            make.bottom.equalTo(view.safeAreaLayoutGuide.snp.top)
        }
        
        statisticsView.snp.makeConstraints { make in
            make.top.equalTo(emptyTopView.snp.bottom)
            make.leading.trailing.equalToSuperview()
            make.height.equalTo(60)
        }
        playView.snp.makeConstraints { make in
            make.height.equalTo(85)
            make.bottom.equalToSuperview()
            make.leading.trailing.equalToSuperview()
        }
//        collectionView.snp.makeConstraints { make in
//            make.top.equalTo(statisticsView.snp.bottom).offset(8)
//            make.bottom.equalTo(playView.snp.top).offset(-8)
//            make.leading.trailing.equalToSuperview().inset(8)
//            make.center.equalToSuperview()
//        }
    }
}

extension DashboardViewController: DashboardViewProtocol {
    func update() {
        collectionView.reloadData()
    }
    
    func updateTimer(with text: String) {
        statisticsView.updateTimer(with: text)
    }
    
    func updateMainStatistic(uninfected: String, infected: String) {
        statisticsView.updateMainStatistic(uninfected: uninfected, infected: infected)
    }
    
    func updateProgressView(_ progress: Float) {
        playView.updateProgress(progress)
    }
}

// MARK: - UICollectionViewDataSource
extension DashboardViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        presenter?.entities.count ?? 0
    }
    
    func collectionView(
        _ collectionView: UICollectionView,
        numberOfItemsInSection section: Int
    ) -> Int {
        presenter?.entities[section].count ?? 0
    }
    
    func collectionView(
        _ collectionView: UICollectionView,
        cellForItemAt indexPath: IndexPath
    ) -> UICollectionViewCell {
        guard let presenter else { return UICollectionViewCell() }
        let cell: GeneralCell = collectionView.dequeueReusableCell(forIndexPath: indexPath)
        cell.configure(entity: presenter.entities[indexPath.section][indexPath.row])
        return cell
    }
    
    
}

// MARK: - UICollectionViewDelegate
extension DashboardViewController: UICollectionViewDelegate {
    
    func collectionView(
        _ collectionView: UICollectionView,
        didSelectItemAt indexPath: IndexPath
    ) {
        presenter?.select(at: indexPath)
        presenter?.entities[indexPath.section][indexPath.row].type = .infected
        presenter?.spreadInfection()
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 32, height: 32)
    }
}

// MARK: - UICollectionViewFlowLayoutDelegate
extension DashboardViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        let cellWidth: CGFloat = 32.0
               let horizontalSpacing: CGFloat = 10.0
               let numberOfCells = presenter?.entities[section].count ?? 0
               let totalCellWidth = cellWidth * CGFloat(numberOfCells)
               let totalSpacingWidth = horizontalSpacing * CGFloat(max(numberOfCells - 1, 0))
               let inset = max((collectionView.frame.width - (totalCellWidth + totalSpacingWidth)) / 2, 0)
               return UIEdgeInsets(top: 0, left: inset, bottom: 0, right: inset)
    }
}

// MARK: - UIScrollView
extension DashboardViewController: UIScrollViewDelegate {
    func viewForZooming(in scrollView: UIScrollView) -> UIView? {
           return scrollableContainerView
       }
       
//       func scrollViewDidZoom(_ scrollView: UIScrollView) {
//           // Обновление расположения ячеек при изменении масштаба
//           updateCellLayout()
//       }
}
