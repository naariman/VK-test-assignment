//
//  DashboardViewController.swift
//  VK Test Assignment
//
//  Created Nariman on 22.03.2024.
//  Copyright Â© 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Dastan Makhutov @mchutov
//

import UIKit

final class DashboardViewController: UIViewController {
    private struct Constants {
        static var itemSize = 32
        static let maxItemSize = 48
        static let minItemSize = 12
        static var itemSpacing = 10.0
        
        static var zoomScale: CGFloat = 1.0
        static let minZoom: CGFloat = 0.5
        static let maxZoom: CGFloat = 1.5
    }
    
    var presenter: DashboardPresenterProtocol?
    
    private let emptyTopView: VKView = .init()
    private let statisticsView: DashboardStatisticsView = .init()
    private let playView: PlayView = .init()
    private lazy var zoomButtonsView: ZoomButtonsView = .init()
    
    private lazy var scrollView: UIScrollView = {
       let scrollView = UIScrollView()
        scrollView.delegate = self
        scrollView.minimumZoomScale = 0.5
        scrollView.maximumZoomScale = 5.0
        scrollView.zoomScale = 1.0
        return scrollView
    }()
    
    lazy private var collectionView: UICollectionView = {
        let layout: UICollectionViewFlowLayout = .init()
        layout.scrollDirection = .horizontal
        layout.minimumInteritemSpacing = 0
        layout.minimumLineSpacing = 0
        let collectionView = UICollectionView(
            frame: view.bounds,
            collectionViewLayout: layout
        )
        collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        collectionView.backgroundColor = .clear
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(GeneralCell.self)
        return collectionView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter?.viewDidLoad()
        setupUI()
    }
    
    func configureStatisticsView(with model: EpidemicOverallStatistic) {
        statisticsView.configure(with: model)
    }
}

private extension DashboardViewController {
   
    func setupUI() {
        view.backgroundColor = .dashboardBackground
        view.addSubviews(
            emptyTopView,
            statisticsView,
            collectionView,
            playView
        )
        
        emptyTopView.snp.makeConstraints { make in
            make.top.equalToSuperview()
            make.leading.trailing.equalToSuperview()
            make.bottom.equalTo(view.safeAreaLayoutGuide.snp.top)
        }
        
        statisticsView.snp.makeConstraints { make in
            make.top.equalTo(emptyTopView.snp.bottom)
            make.leading.trailing.equalToSuperview()
            make.height.equalTo(60)
        }
        
        playView.snp.makeConstraints { make in
            make.height.equalTo(85)
            make.bottom.equalToSuperview()
            make.leading.trailing.equalToSuperview()
        }
        zoomButtonsView.delegate = self
        
        view.addSubview(scrollView)
        scrollView.snp.makeConstraints { make in
            make.top.equalTo(statisticsView.snp.bottom)
            make.bottom.equalTo(playView.snp.top)
            make.leading.trailing.equalToSuperview()
        }
        scrollView.contentInsetAdjustmentBehavior = .never
        scrollView.contentOffset = CGPoint(x: -view.safeAreaInsets.left, y: -view.safeAreaInsets.top)
        scrollView.addSubview(collectionView)
        
        view.addSubview(zoomButtonsView)
        zoomButtonsView.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.trailing.equalToSuperview().offset(-16)
        }
        
    }
}

// MARK: - DashboardViewProtocol
extension DashboardViewController: DashboardViewProtocol {
    func update() {
        collectionView.reloadData()
    }
    
    func updateTimer(with text: String) {
        statisticsView.updateTimer(with: text)
    }
    
    func updateMainStatistic(uninfected: String, infected: String) {
        statisticsView.updateMainStatistic(uninfected: uninfected, infected: infected)
    }
    
    func updateProgressView(_ progress: Float) {
        playView.updateProgress(progress)
    }
    
    func end(with model: SimulationEndModel) {
        collectionView.isUserInteractionEnabled = false
        let endView = SimulationEndView()
        view.addSubview(endView)
        UIView.animate(withDuration: 0.3) {
            endView.snp.makeConstraints { make in
                make.center.equalToSuperview()
            }
            endView.layoutIfNeeded()
        }
        endView.configure(with: model)
    }
}

// MARK: - UICollectionViewDataSource
extension DashboardViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        presenter?.matrix.count ?? 0
    }
    
    func collectionView(
        _ collectionView: UICollectionView,
        numberOfItemsInSection section: Int
    ) -> Int {
        presenter?.matrix[0].count ?? 0
    }
    
    func collectionView(
        _ collectionView: UICollectionView,
        cellForItemAt indexPath: IndexPath
    ) -> UICollectionViewCell {
        guard let presenter else { return UICollectionViewCell() }
        let cell: GeneralCell = collectionView.dequeueReusableCell(forIndexPath: indexPath)
        cell.configure(presenter.matrix[indexPath.section][indexPath.row])
        return cell
    }
}

// MARK: - UICollectionViewDelegate
extension DashboardViewController: UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func collectionView(
        _ collectionView: UICollectionView,
        didSelectItemAt indexPath: IndexPath
    ) {
        presenter?.select(at: indexPath)
    }
    
    func collectionView(
        _ collectionView: UICollectionView,
        layout collectionViewLayout: UICollectionViewLayout,
        sizeForItemAt indexPath: IndexPath
    ) -> CGSize {
        let columns = Int((collectionView.bounds.width * Constants.zoomScale) / CGFloat(Constants.itemSize))
        let rows = Int((collectionView.bounds.height * Constants.zoomScale) / CGFloat(Constants.itemSize))
        
        let width = collectionView.bounds.width / CGFloat(columns)
        let height = collectionView.bounds.height / CGFloat(rows)
        
        return CGSize(width: width, height: height)
    }

}

extension DashboardViewController: ZoomButtonsViewDelegate {
    
    func zoomInDidTap() {
        scrollView.zoomScale += 0.2
    }
    
    
    func zoomOutDidTap() {
        scrollView.zoomScale -= 0.2
    }
}

extension DashboardViewController: UIScrollViewDelegate {
    
    func viewForZooming(in scrollView: UIScrollView) -> UIView? {
           return collectionView
       }
    
}
