//
//  DashboardPresenter.swift
//  VK Test Assignment
//
//  Created Nariman on 22.03.2024.
//  Copyright Â© 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Dastan Makhutov @mchutov
//

import UIKit

final class DashboardPresenter: DashboardPresenterProtocol {
    weak private var view: DashboardViewProtocol?
    var interactor: DashboardInteractorProtocol?
    private let router: DashboardWireframeProtocol
    
    private let userInputModel: UserInputModel
    var entities: [EntityViewModel] = [] {
        didSet {
            view?.update()
        }
    }
    var epidemicOverallStatistic: EpidemicOverallStatistic
    private var timer: Timer?
    private var seconds = 0
    
    init(
        interface: DashboardViewProtocol,
        interactor: DashboardInteractorProtocol?,
        router: DashboardWireframeProtocol,
        model: UserInputModel
    ) {
        self.view = interface
        self.interactor = interactor
        self.router = router
        self.userInputModel = model
        epidemicOverallStatistic = .init(uninfectedCount: model.groupSize)
    }
    
    func viewDidLoad() {
        view?.configureStatisticsView(with: epidemicOverallStatistic)
        entitiesInitialProcess()
        startTimer()
    }
    
}

// MARK: - Init
private extension DashboardPresenter {
    func entitiesInitialProcess() {
        DispatchQueue.main.async {
            for _ in 0..<self.userInputModel.groupSize {
                self.entities.append(.init(type: .uninfected))
            }
        }
    }
}

// MARK: -
extension DashboardPresenter {
    func select(at indexPath: IndexPath) {
        if entities[indexPath.row].type == .uninfected {
            epidemicOverallStatistic.uninfectedCount -= 1
            epidemicOverallStatistic.infectedCount += 1
            view?.updateMainStatistic(
                uninfected: epidemicOverallStatistic.uninfectedCount.description,
                infected: epidemicOverallStatistic.infectedCount.description
            )
        }
    }
}

// MARK: - Timer
private extension DashboardPresenter {
    func startTimer() {
        timer = Timer.scheduledTimer(
            timeInterval: 1.0,
            target: self,
            selector: #selector(updateTimer),
            userInfo: nil,
            repeats: true
        )
    }
    
    @objc func updateTimer() {
         seconds += 1
         let minutes = seconds / 60
         let secondsValue = seconds % 60
         let timeString = String(format: "%02d:%02d", minutes, secondsValue)
        view?.updateTimer(with: timeString)
     }
}
